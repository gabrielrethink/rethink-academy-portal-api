generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// comente o datasource e insira o novo 
// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// comente tamb√©m o enum Roles completo 
// comente a linha socials Json?  dentro model Profile

enum Roles {
  STUDENT
  AMBASSADOR
  RETHINKER
}

enum Titles {
  ENGINEERING
  DESIGN
  PRODUCT
}

enum Main {
  ENGINEERING
  DESIGN
  PRODUCT
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  surname       String?
  role          Roles           @default(STUDENT)
  main          Main            @default(ENGINEERING)
  avatar        String
  bucket        Bucket?
  badges        Badges?
  info          Info?
  tasks         Tasks[]
  monthEvaluate MonthEvaluate[]
  Note          Note[]
  GoalList      GoalList[]

  @@map("user")
}

model Note {
  id         String   @id @default(uuid())
  title      String?
  content    String?
  // categories Json?
  createdAt  DateTime @default(now())
  categories String?
  isPublic   Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("note")
}

model Info {
  id                    String  @id @default(uuid())
  college               String?
  semester              String?
  workTime              String?
  transportationVoucher String?
  providedEquipment     String?
  status                String?
  user                  User    @relation(fields: [userId], references: [id])
  userId                String  @unique

  @@map("info")
}

model Badges {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  product     String[]
  engineering String[]
  academy     String[]
  design      String[]
  welcome     String[]
  studies     String[]
  timeRecord  String[]
  troll       String[]
  goals       String[]

  @@map("badges")
}

model MonthEvaluate {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  skillType Boolean @default(true)
  userId    String
  email     String
  month     String
  skill1    Int
  skill2    Int
  skill3    Int
  skill4    Int
  skill5    Int
  skill6    Int

  @@map("monthEvaluate")
}

model Bucket {
  id     String @id @default(uuid())
  title  String
  url    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model GoalList {
  id     String @id @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  goal   Goal[] @relation

  @@map("goalList")
}

model Goal {
  id         String   @id @default(uuid())
  title      String
  conclude   Boolean
  goalList   GoalList @relation(fields: [goalListId], references: [id], onDelete: Cascade)
  goalListId String

  @@map("goal")
}

model Tasks {
  id          String   @id @default(uuid())
  name        String
  taskDate    DateTime
  startTime   String
  endTime     String
  tags        String   @default("tags")
  status      String   @default("status")
  description String   @default("description")
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("tasks")
}
