generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// comente o datasource e insira o novo 
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// comente tamb√©m o enum Roles completo 
// comente a linha socials Json?  dentro model Profile

// enum Roles {
//   STUDENT
//   EMBASSADOR
//   RETHINKER
// }

// enum Titles {
//   ENGINEERING
//   DESIGN
//   PRODUCT
// }

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  surname       String?
  // role    Roles?   @default(STUDENT)
  role          String?         @default("STUDENT")
  note          Note[]
  info          Info?
  main          String?         @default("ENGINEERING")
  // main     Titles?    @default(ENGINEERING)
  monthEvaluate MonthEvaluate[]
  bucket        Bucket[]
  GoalList      GoalList[]
  Badges        Badges?

  @@map("user")
}

model Note {
  id         String   @id @default(uuid())
  title      String?
  content    String?
  // categories Json?
  createdAt  DateTime @default(now())
  categories String?
  isPublic   Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("note")
}

model Info {
  id                    String  @id @default(uuid())
  college               String?
  semester              String?
  workTime              String?
  transportationVoucher String?
  providedEquipment     String?
  status                String?
  user                  User    @relation(fields: [userId], references: [id])
  userId                String  @unique

  @@map("info")
}

model Badges {
  id          String @id @default(uuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
  product     Int    @default(0)
  engineering Int    @default(0)
  academy     Int    @default(0)
  design      Int    @default(0)
  welcome     Int    @default(0)
  studies     Int    @default(0)
  timeRecord  Int    @default(0)
  troll       Int    @default(0)
  goals       Int    @default(0)

  @@map("badges")
}

model MonthEvaluate {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  skillType Boolean @default(true)
  userId    String
  month     String
  skill1    Float
  skill2    Float
  skill3    Float
  skill4    Float
  skill5    Float
  skill6    Float

  @@map("monthEvaluate")
}

model Bucket {
  id     String @id @default(uuid())
  title  String
  url    String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model GoalList {
  id     String @id @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  goal   Goal[] @relation

  @@map("goalList")
}

model Goal {
  id         String   @id @default(uuid())
  title      String
  conclude   Boolean
  goalList   GoalList @relation(fields: [goalListId], references: [id], onDelete: Cascade)
  goalListId String

  @@map("goal")
}
