// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Main {
  ENGINEERING
  DESIGN
  PRODUCT
}

enum CourseStyle {
  COURSE
  WORKSHOP
  TRAINING
  LECTURE
}

enum Roles {
  STUDENT
  EMBASSADOR
  RETHINKER
}

enum Levels {
  LOW
  MEDIUM
  HIGH
}

model User {
  id      String   @id @default(uuid())
  email   String   @unique
  name    String?
  surname String?
  main   Main?  @default(ENGINEERING)
  watched String[]
  role    Roles    @default(STUDENT)
  profile Profile?
  course  Course[]

  @@map("user")
}

model Profile {
  id     String  @id @default(uuid())
  bio    String?
  avatar String?
  social Json?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique

  @@map("profile")
}

model Trail {
  id      String    @id @default(uuid())
  name    String   @unique
  description String
  weight Int
  imageUrl String
  course Course[]
  courseTimeline CourseTimeline[]
  main Main @default(ENGINEERING)
  
  @@map("trail")
}

model Course {
  id          String      @id @default(uuid())
  name        String
  description String
  level       Levels
  workload    Int
  learning    String
  skills      String
  courseStyle CourseStyle @default(COURSE)
  teacherId   String
  teacher     User        @relation(fields: [teacherId], references: [id])

  trailId String
  trail   Trail  @relation(fields: [trailId], references: [id])

  modules Module[]

  @@map("course")
}

model Lesson {
  id          String @id @default(uuid())
  name        String
  embedUrl    String
  order       Int
  description String
  module      Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String

  @@map("lesson")
}

model Module {
  id       String   @id @default(uuid())
  name     String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  lessons  Lesson[]
  cratedAt DateTime @default(now())

  @@map("module")
}

model CourseTimeline {
  id          String    @id @default(uuid())
  stage       String
  start       DateTime
  finish      DateTime
  content     String
  trail       Trail   @relation(fields: [trailId], references: [id])
  trailId     String

  @@map("timeline")
}
