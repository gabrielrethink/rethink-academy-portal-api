generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String?
  surname        String?
  // role    Roles?  @default(STUDENT)
  role           String?    @default("STUDENT")
  // main    Titles?  @default(ENGINEERING)
  main           String?    @default("ENGINEERING")
  avatar         String
  bucket         Bucket?
  badges         Badges?
  tasks          Tasks[]
  Profile        Profile?
  userCommented  Comments[] @relation("UserCommented")
  commmentAuthor Comments[] @relation("CommmentAuthor")

  @@map("user")
}

model Badges {
  id          String @id @default(uuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
  product     Int    @default(0)
  engineering Int    @default(0)
  academy     Int    @default(0)
  design      Int    @default(0)
  welcome     Int    @default(0)
  studies     Int    @default(0)
  timeRecord  Int    @default(0)
  troll       Int    @default(0)
  goals       Int    @default(0)

  @@map("badges")
}

model Bucket {
  id     String @id @default(uuid())
  title  String
  url    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

// enum Titles {
//   ENGINEERING
//   DESIGN
//   PRODUCT
// }

model Tasks {
  id          String   @id @default(uuid())
  name        String
  taskDate    DateTime
  startTime   String
  endTime     String
  tags        String   @default("tags")
  status      String   @default("status")
  description String   @default("description")
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("tasks")
}

model Comments {
  id               String  @id @default(uuid())
  text             String
  user             User    @relation(name: "UserCommented", fields: [userId], references: [id])
  userId           String
  CommmentAuthor   User?   @relation(name: "CommmentAuthor", fields: [CommmentAuthorId], references: [id])
  CommmentAuthorId String?

  @@map("comments")
}

// enum Roles {
//   STUDENT
//   EMBASSADOR
//   RETHINKER
// }

model Profile {
  id     String  @id @default(uuid())
  bio    String?
  avatar String?
  // social Json?
  social String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique

  @@map("profile")
}
